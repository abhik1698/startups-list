{"version":3,"sources":["globals.js","components/startups.js","App.js","serviceWorker.js","index.js"],"names":["ServerURI","Startups","state","data","name","country","ack","showForm","getData","Axios","get","then","res","console","log","setState","catch","err","handleSubmit","e","a","preventDefault","trim","length","alert","post","push","info","this","style","backgroundColor","border","color","textAlign","padding","map","startup","index","key","onSubmit","className","type","value","placeholder","onChange","target","required","marginTop","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qTAAaA,EAAY,wBCIJC,E,4MACnBC,MAAQ,CACNC,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,IAAK,GACLC,UAAU,G,EAGZC,QAAU,WACRC,IAAMC,IAAN,UAAaV,EAAb,oBACGW,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEZ,KAAMS,EAAIT,UAE3Ba,OAAM,SAACC,GAAD,OAASJ,QAAQC,IAAIG,O,EAGhCC,a,uCAAe,WAAOC,GAAP,qBAAAC,EAAA,yDACbD,EAAEE,iBADW,EAGmB,EAAKnB,MAA7BE,EAHK,EAGLA,KAAMC,EAHD,EAGCA,QAASF,EAHV,EAGUA,KAEI,IAAvBC,EAAKkB,OAAOC,QAAwC,IAAxBlB,EAAQiB,KAAKC,OALhC,uBAMXC,MAAM,4BACN,EAAKT,SAAS,CAAET,IAAK,KAPV,0BAWbG,IAAMgB,KAAN,UAAczB,EAAd,gBAAuC,CACrCI,KAAMA,EAAKkB,OACXjB,QAASA,EAAQiB,SAEhBX,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZT,EAAKuB,KAAKd,EAAIT,KAAKwB,MACnB,EAAKZ,SAAS,CACZX,KAAM,GACNC,QAAS,GACTC,IAAK,yCACLH,KAAMA,EACNI,UAAU,OAGbS,OAAM,SAACC,GACNJ,QAAQC,IAAIG,GACZ,EAAKF,SAAS,CAAET,IAAK,qBA5BZ,2C,wHAiCbsB,KAAKpB,Y,+BAGG,IAAD,SACwCoB,KAAK1B,MAA5CC,EADD,EACCA,KAAMC,EADP,EACOA,KAAMC,EADb,EACaA,QAASC,EADtB,EACsBA,IAAKC,EAD3B,EAC2BA,SAElC,OACE,yBAAKsB,MAAO,CAAEC,gBAAiB,YAAaC,OAAQ,oBAClD,yBACEF,MAAO,CACLE,OAAQ,kBACRD,gBAAiB,SACjBE,MAAO,QACPC,UAAW,WAGb,yDAEF,yBAAKJ,MAAO,CAAEK,QAAS,KACrB,6BACE,gDACA,4BACG/B,EAAKgC,KAAI,SAACC,EAASC,GAAV,OACR,yBAAKC,IAAKD,GACR,4BACE,4BACGD,EAAQhC,KADX,KACmBgC,EAAQ/B,gBAOrC,uBACEwB,MAAO,CACLG,MAAkB,MAAX1B,EAAI,GAAa,QAAU,QAGnCA,GAEFC,GACC,0BAAMgC,SAAUX,KAAKV,cACnB,yBAAKsB,UAAU,cACb,2BACEA,UAAU,eACVC,KAAK,OACLC,MAAOtC,EACPuC,YAAY,OACZC,SAAU,SAACzB,GAAD,OAAO,EAAKJ,SAAS,CAAEX,KAAMe,EAAE0B,OAAOH,SAChDI,UAAQ,KAGZ,yBAAKN,UAAU,cACb,2BACEA,UAAU,eACVC,KAAK,OACLC,MAAOrC,EACPsC,YAAY,UACZC,SAAU,SAACzB,GAAD,OAAO,EAAKJ,SAAS,CAAEV,QAASc,EAAE0B,OAAOH,SACnDI,UAAQ,KAIZ,yBAAKN,UAAU,cACb,2BACEC,KAAK,SACLD,UAAU,yBACVE,MAAM,mBAKZnC,GACA,2BACEsB,MAAO,CAAEkB,UAAW,IACpBN,KAAK,SACLD,UAAU,yBACVE,MAAM,aACNM,QAAS,kBAAM,EAAKjC,SAAS,CAAER,UAAU,a,GAjIjB0C,IAAMC,WCI7BC,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdlD,OAAM,SAAAmD,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.63802f71.chunk.js","sourcesContent":["export const ServerURI = \"http://localhost:3000\";\r\n","import React from \"react\";\r\nimport Axios from \"axios\";\r\nimport { ServerURI } from \"../globals\";\r\n\r\nexport default class Startups extends React.Component {\r\n  state = {\r\n    data: [],\r\n    name: \"\",\r\n    country: \"\",\r\n    ack: \"\",\r\n    showForm: false,\r\n  };\r\n\r\n  getData = () => {\r\n    Axios.get(`${ServerURI}/api/getAllInfo`)\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.setState({ data: res.data });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, country, data } = this.state;\r\n\r\n    if (name.trim().length === 0 && country.trim.length === 0) {\r\n      alert(\"Please give valid inputs\");\r\n      this.setState({ ack: \"\" });\r\n      return;\r\n    }\r\n\r\n    Axios.post(`${ServerURI}/api/addInfo`, {\r\n      name: name.trim(),\r\n      country: country.trim(),\r\n    })\r\n      .then((res) => {\r\n        console.log(res);\r\n        data.push(res.data.info);\r\n        this.setState({\r\n          name: \"\",\r\n          country: \"\",\r\n          ack: \"Successfully added startup to the list\",\r\n          data: data,\r\n          showForm: false,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.setState({ ack: \"Invalid input\" });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  render() {\r\n    const { data, name, country, ack, showForm } = this.state;\r\n\r\n    return (\r\n      <div style={{ backgroundColor: \"lightgrey\", border: \"1px solid black\" }}>\r\n        <div\r\n          style={{\r\n            border: \"1px solid black\",\r\n            backgroundColor: \"purple\",\r\n            color: \"white\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n          <h1>Welcome to Startup World</h1>\r\n        </div>\r\n        <div style={{ padding: 50 }}>\r\n          <div>\r\n            <h2>List of Startups</h2>\r\n            <ol>\r\n              {data.map((startup, index) => (\r\n                <div key={index}>\r\n                  <h4>\r\n                    <li>\r\n                      {startup.name}, {startup.country}\r\n                    </li>\r\n                  </h4>\r\n                </div>\r\n              ))}\r\n            </ol>\r\n          </div>\r\n          <p\r\n            style={{\r\n              color: ack[0] === \"S\" ? \"green\" : \"red\",\r\n            }}\r\n          >\r\n            {ack}\r\n          </p>\r\n          {showForm && (\r\n            <form onSubmit={this.handleSubmit}>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={name}\r\n                  placeholder=\"Name\"\r\n                  onChange={(e) => this.setState({ name: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  value={country}\r\n                  placeholder=\"Country\"\r\n                  onChange={(e) => this.setState({ country: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"btn btn-primary btn-lg\"\r\n                  value=\"Add Startup\"\r\n                />\r\n              </div>\r\n            </form>\r\n          )}\r\n          {!showForm && (\r\n            <input\r\n              style={{ marginTop: 10 }}\r\n              type=\"submit\"\r\n              className=\"btn btn-success btn-lg\"\r\n              value=\"Create New\"\r\n              onClick={() => this.setState({ showForm: true })}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Startups from \"./components/startups.js\";\n\nfunction App() {\n  return <Startups />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}